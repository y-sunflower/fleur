{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>fleur</code>: combining statistics with visualization","text":"<p>With <code>fleur</code> (pronounced \"flur\"), statistics and data visualization are done at the same time. It's meant as a modern tool for highly detailed statistical annotations in plots with high customization capabilities.</p> <p>It only requires foundational libraries: <code>matplotlib</code>, <code>scipy</code> and <code>narwhals</code>. Learn more about fleur.</p> Warning <p>fleur is still in a very early stage: expect regular breaking changes.</p> <p></p>"},{"location":"#examples","title":"Examples","text":"<p>Currently, <code>fleur</code> offers 3 features that you can benefit from:</p> <ul> <li><code>BetweenStats</code>: Use this when you want to compare numerical data across categories (e.g., customer satisfaction between two product versions)</li> <li><code>ScatterStats</code>: Use this to explore the correlation between numerical variables (e.g., the relationship between age and salary)</li> <li><code>BarStats</code>: Use this to examine the relationship between categorical variables (e.g., the relationship between gender and smoking status)</li> </ul> Group comparisonCorrelationCategorical data <pre><code># mkdocs: render\nfrom fleur import BetweenStats\nfrom fleur import data\n\ndf = data.load_iris()\n\nBetweenStats(df[\"sepal_length\"], df[\"species\"]).plot()\n</code></pre> <pre><code># mkdocs: render\nfrom fleur import ScatterStats\nfrom fleur import data\n\ndf = data.load_iris()\n\nScatterStats(df[\"sepal_length\"], df[\"sepal_width\"]).plot()\n</code></pre> <pre><code># mkdocs: render\nfrom fleur import BarStats\nfrom fleur import data\n\ndf = data.load_mtcars()\n\nBarStats(df[\"cyl\"], df[\"vs\"]).plot()\n</code></pre> <p>See more examples</p>"},{"location":"#installation","title":"Installation","text":"stabledev <pre><code>pip install fleur\n</code></pre> <pre><code>pip install git+https://github.com/y-sunflower/fleur.git\n</code></pre>"},{"location":"about/","title":"About","text":"<p><code>fleur</code> aims to provide some differences, but its key feature is the ability to create impressive and easy-to-reproduce plots with very few lines of code. It is well-suited for both exploratory data analysis and more goal-oriented analysis. More generally, <code>fleur</code> tries to:</p> <ul> <li>being super easy to use<ul> <li>automatically detect which test to use</li> <li>make nice plots by default</li> <li>minimalist API</li> </ul> </li> <li>letting you control over everything: both from the statistics and dataviz point of view</li> <li>being more lightweight: it only relies on<ul> <li><code>matplotlib</code>: for visualization</li> <li><code>scipy</code>: for statistics</li> <li><code>narwhals</code>: for data handling (<code>fleur</code> accepts all inputs that <code>narhwals</code> support: <code>pandas</code>, <code>polars</code>, <code>pyarrow</code>, <code>cudf</code>, <code>modin</code>).</li> </ul> </li> <li>provide an extensive documentation with many examples.</li> </ul>"},{"location":"about/#inspirations","title":"Inspirations","text":"<p><code>fleur</code> is highly inspired by the following projects:</p> <ul> <li><code>ggstatsplot</code>: an R package that extends <code>ggplot2</code> to add statistical details to plots.</li> <li><code>seaborn</code>: the famous high-level interface of matplotlib for statistical data visualization.</li> <li><code>statannotations</code>: a <code>seaborn</code> extension that adds statistical annotations.</li> </ul>"},{"location":"dev/","title":"Contributing","text":"<p>Any kind of contribution is more than welcomed! There are several ways you can contribute:</p> <ul> <li>Opening GitHub issues to list the bugs you've found</li> <li>Implementation of new features or resolution of existing bugs</li> <li>Enhancing the documentation</li> </ul>"},{"location":"dev/#get-started","title":"Get started","text":"<ul> <li>Set up development environment</li> <li>Learn about code structure</li> </ul>"},{"location":"dev/code-structure/","title":"Code Structure","text":"<p>The project is organized as follow:</p> <ul> <li><code>fleur/</code> contains core files (<code>betweenstats.py</code>, <code>scatterstats.py</code>, etc) at its root.</li> <li><code>fleur/_utils/</code> contains various utility files. They can be about statistics, dataviz or something else.</li> <li><code>fleur/data/</code> contains the datasets distributed with the package.</li> </ul>"},{"location":"dev/environment/","title":"Set Up Environement","text":"<p>The easiest way to get started is to use uv and Git.</p>"},{"location":"dev/environment/#install-for-development","title":"Install for development","text":"<ul> <li> <p>Fork the repository to your own GitHub account.</p> </li> <li> <p>Clone your forked repository to your local machine:</p> </li> </ul> <pre><code>git clone https://github.com/YOURNAME/fleur.git\ncd fleur\ngit remote add upstream https://github.com/y-sunflower/fleur.git\n</code></pre> <ul> <li>Create a new branch:</li> </ul> <pre><code>git checkout -b my-feature\n</code></pre> <ul> <li>Set up your Python environment:</li> </ul> <pre><code>uv sync --all-groups\nuv run pre-commit install\nuv pip install -e .\n</code></pre>"},{"location":"dev/environment/#code","title":"Code!","text":"<p>You can now make changes to the package and start coding!</p>"},{"location":"dev/environment/#run-the-test","title":"Run the test","text":"<ul> <li>Test that everything works correctly by running:</li> </ul> <pre><code>uv run pytest\n</code></pre>"},{"location":"dev/environment/#preview-documentation-locally","title":"Preview documentation locally","text":"<pre><code>uv run mkdocs serve\n</code></pre>"},{"location":"dev/environment/#push-changes","title":"Push changes","text":"<ul> <li>Commit and push your changes:</li> </ul> <pre><code>git add -A\ngit commit -m \"description of what you did\"\ngit push\n</code></pre> <ul> <li>Go back to your fork and click on the \"Open a PR\" popup</li> </ul> <p>Congrats! Once your PR is merged, it will be part of <code>fleur</code>.</p> <p></p>"},{"location":"examples/barstats/","title":"Barstats","text":""},{"location":"examples/barstats/#plot-style","title":"Plot style","text":"<ul> <li>Default</li> </ul> <pre><code># mkdocs: render\nfrom fleur import data\nfrom fleur import BetweenStats\n\nimport polars as pl\n\ndf = (\n   data.load_titanic(\"polars\")\n   .select(pl.col(\"Age\"), pl.col(\"Sex\"))\n   .drop_nulls()\n)\n\nBetweenStats(df[\"Sex\"], df[\"Age\"]).plot()\n</code></pre>"},{"location":"examples/betweenstats/","title":"Betweenstats","text":"<p>The <code>BetweenStats()</code> class is meant for comparing numerical values across multiple groups. You want to use it in cases such as:</p> <ul> <li>Blood glucose levels before and after treatment</li> <li>Customer satisfaction ratings between two product versions</li> <li>Weight changes across three fitness plans</li> <li>Air quality index in urban vs. rural areas</li> </ul> <p>It supports tests for 2 groups or more, paired groups or not, equal variance or not, parametric or not, and a large set of styling options.</p>"},{"location":"examples/betweenstats/#plot-style","title":"Plot style","text":"<ul> <li>Default</li> </ul> <pre><code># mkdocs: render\nfrom fleur import BetweenStats\nfrom fleur import data\n\ndf = data.load_iris()\n\nBetweenStats(df[\"sepal_length\"], df[\"species\"]).plot()\n</code></pre> <ul> <li>Change colors</li> </ul> <pre><code># mkdocs: render\nfrom fleur import BetweenStats\nfrom fleur import data\n\ndf = data.load_iris()\n\nBetweenStats(df[\"sepal_length\"], df[\"species\"]).plot(\n    colors=[\"#005f73\", \"#ee9b00\", \"#9b2226\"]\n)\n</code></pre> <ul> <li>Change orientation</li> </ul> <pre><code># mkdocs: render\nfrom fleur import BetweenStats\nfrom fleur import data\n\ndf = data.load_iris()\n\nBetweenStats(df[\"sepal_length\"], df[\"species\"]).plot(\n    orientation=\"horizontal\"\n)\n</code></pre> <ul> <li>Remove stats from plot</li> </ul> <pre><code># mkdocs: render\nfrom fleur import BetweenStats\nfrom fleur import data\n\ndf = data.load_iris()\n\nBetweenStats(df[\"sepal_length\"], df[\"species\"]).plot(\n    show_stats=False\n)\n</code></pre> <ul> <li>Remove means from plot</li> </ul> <pre><code># mkdocs: render\nfrom fleur import BetweenStats\nfrom fleur import data\n\ndf = data.load_iris()\n\nBetweenStats(df[\"sepal_length\"], df[\"species\"]).plot(\n    show_means=False\n)\n</code></pre> <ul> <li>Hide specific elements</li> </ul> <pre><code># mkdocs: render\nfrom fleur import BetweenStats\nfrom fleur import data\n\ndf = data.load_iris()\n\nBetweenStats(df[\"sepal_length\"], df[\"species\"]).plot(\n    box=False,\n    scatter=False,\n    violin=True, # default\n)\n</code></pre> <ul> <li>Advanced example</li> </ul> <pre><code># mkdocs: render\nfrom fleur import BetweenStats, data\nimport polars as pl\nimport matplotlib.pyplot as plt\n\ndf = data.load_titanic(\"polars\")\ndf = (\n    df.select(pl.col(\"Age\"), pl.col(\"Survived\"))\n    .drop_nulls()\n    .with_columns(pl.col(\"Survived\").cast(pl.String).cast(pl.Categorical))\n    .with_columns(\n        Survived=pl.when(pl.col(\"Survived\") == \"1\")\n        .then(pl.lit(\"Survived\"))\n        .otherwise(pl.lit(\"Died\"))\n    )\n)\n\nfig, ax = plt.subplots()\nBetweenStats(df[\"Survived\"], df[\"Age\"], approach=\"nonparametric\").plot(\n    ax=ax,\n    orientation=\"horizontal\",\n    scatter_kws={\"alpha\": 0.3, \"s\": 20},\n    jitter_amount=0.3,\n    colors=[\"#005f73\", \"#ee9b00\"],\n)\n</code></pre>"},{"location":"examples/betweenstats/#statistics","title":"Statistics","text":"<ul> <li>Dependent (paired) samples</li> </ul> <pre><code># mkdocs: render\nfrom fleur import BetweenStats\nfrom fleur import data\n\ndf = data.load_iris()\ndf = df[df[\"species\"] != \"setosa\"] # keep only 2 groups\n\nBetweenStats(df[\"sepal_length\"], df[\"species\"], paired=True).plot()\n</code></pre> <ul> <li>Non-parametric test</li> </ul> <pre><code># mkdocs: render\nfrom fleur import BetweenStats\nfrom fleur import data\n\ndf = data.load_iris()\ndf = df[df[\"species\"] != \"setosa\"] # keep only 2 groups\n\nBetweenStats(df[\"sepal_length\"], df[\"species\"], approach=\"nonparametric\").plot()\n</code></pre> <ul> <li>Non-parametric test + paired samples</li> </ul> <pre><code># mkdocs: render\nfrom fleur import BetweenStats\nfrom fleur import data\n\ndf = data.load_iris()\ndf = df[df[\"species\"] != \"setosa\"] # keep only 2 groups\n\nBetweenStats(\n    df[\"sepal_length\"],\n    df[\"species\"],\n    approach=\"nonparametric\",\n    paired=True,\n).plot()\n</code></pre> <ul> <li>Robust</li> </ul> <pre><code># mkdocs: render\nfrom fleur import BetweenStats\nfrom fleur import data\n\ndf = data.load_iris()\ndf = df[df[\"species\"] != \"setosa\"] # keep only 2 groups\n\nBetweenStats(\n    df[\"sepal_length\"],\n    df[\"species\"],\n    approach=\"robust\",\n    trim=0.1,\n).plot()\n</code></pre> <p>Learn more in the <code>BetweenStats()</code> reference page</p>"},{"location":"examples/quick-start/","title":"Quick start","text":"<p>An overview of all things you can do with <code>fleur</code>:</p>"},{"location":"examples/quick-start/#group-comparison","title":"Group comparison","text":"<pre><code># mkdocs: render\nfrom fleur import BetweenStats, data\n\ndf = data.load_iris()\n\nBetweenStats(df[\"sepal_length\"], df[\"species\"]).plot()\n</code></pre>"},{"location":"examples/quick-start/#correlation","title":"Correlation","text":"<pre><code># mkdocs: render\nfrom fleur import ScatterStats, data\n\ndf = data.load_iris()\n\nScatterStats(df[\"sepal_length\"], df[\"sepal_width\"]).plot()\n</code></pre>"},{"location":"examples/quick-start/#categorical-data-comparison","title":"Categorical data comparison","text":"<pre><code># mkdocs: render\nfrom fleur import BarStats, data\n\ndf = data.load_mtcars()\ndf = df[df[\"cyl\"].isin([4, 6])]\n\nBarStats(df[\"cyl\"], df[\"vs\"]).plot()\n</code></pre>"},{"location":"examples/scatterstats/","title":"Scatterstats","text":"<pre><code># mkdocs: render\nfrom fleur import ScatterStats\nfrom fleur import data\n\ndf = data.load_iris()\n\nScatterStats(x=df[\"sepal_length\"], y=df[\"sepal_width\"]).plot()\n</code></pre>"},{"location":"reference/barstats/","title":"Bar stats","text":""},{"location":"reference/barstats/#fleur.barstats.BarStats","title":"<code>fleur.barstats.BarStats</code>","text":"<p>Statistical comparison and plotting class for categorical data analysis.</p> <p>This class provides functionality to visualize and statistically compare categorical data across groups. It supports chi-square tests for independence, Fisher's exact test for small samples, and creates nice-looking stacked or grouped bar charts.</p> <p>Attributes:</p> Name Type Description <code>statistic</code> <code>float</code> <p>The computed test statistic (chi-square or Fisher's exact).</p> <code>pvalue</code> <code>float</code> <p>The p-value of the statistical test.</p> <code>main_stat</code> <code>str</code> <p>The formatted test statistic string for display.</p> <code>expression</code> <code>str</code> <p>Full LaTeX-style annotation string.</p> <code>test_name</code> <code>str</code> <p>Name of the statistical test used.</p> <code>n_obs</code> <code>int</code> <p>Total number of observations.</p> <code>n_cat</code> <code>int</code> <p>Number of unique categories in the first variable.</p> <code>n_levels</code> <code>int</code> <p>Number of unique levels in the second variable.</p> <code>contingency_table</code> <code>ndarray</code> <p>The contingency table.</p> <code>expected_frequencies</code> <code>ndarray</code> <p>Expected frequencies for chi-square test.</p> <code>cramers_v</code> <code>float</code> <p>Cramer's V effect size measure.</p> <code>ax</code> <code>Axes</code> <p>The matplotlib axes used for plotting.</p>"},{"location":"reference/barstats/#fleur.barstats.BarStats.__init__","title":"<code>__init__(x, y, data=None, approach='freq', paired=False, thres_fisher=5, **kwargs)</code>","text":"<p>Initialize a <code>BarStats()</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>str | SeriesT | Iterable</code> <p>Colname of <code>data</code> or a Series or array-like (categorical).</p> required <code>y</code> <code>str | SeriesT | Iterable</code> <p>Colname of <code>data</code> or a Series or array-like (categorical).</p> required <code>data</code> <code>Frame | None</code> <p>An optional dataframe.</p> <code>None</code> <code>approach</code> <code>str</code> <p>A character specifying the type of statistical approach: \"freq\" (default) or \"bayes\".</p> <code>'freq'</code> <code>paired</code> <code>bool</code> <p>Whether comparing the same observations or not.</p> <code>False</code> <code>thres_fisher</code> <code>int</code> <p>The threshold where you consider Chisquare assumptions violated. By default, if expected frequencies are below 5, then it will run a Fisher exact's test instead. Set to 0 to force using a Chisquare test.</p> <code>5</code> <code>kwargs</code> <code>Any</code> <p>Additional arguments passed to the scipy test function.</p> <code>{}</code>"},{"location":"reference/barstats/#fleur.barstats.BarStats.plot","title":"<code>plot(*, orientation='horizontal', colors=None, show_stats=True, show_counts=True, plot_type='stacked', ax=None, bar_kws=None)</code>","text":"<p>Plot a statistical comparison bar chart for categorical data.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>str</code> <p>\"vertical\" or \"horizontal\" orientation of plots.</p> <code>'horizontal'</code> <code>colors</code> <code>list | None</code> <p>List of colors for each group.</p> <code>None</code> <code>show_stats</code> <code>bool</code> <p>If True, adds statistics on the plot.</p> <code>True</code> <code>show_counts</code> <code>bool</code> <p>If True, shows sample counts in axis labels.</p> <code>True</code> <code>plot_type</code> <code>str</code> <p>Type of bar chart (\"stacked\" or \"grouped\").</p> <code>'stacked'</code> <code>ax</code> <code>Axes | None</code> <p>Existing Axes to plot on. If None, uses current Axes.</p> <code>None</code> <code>bar_kws</code> <code>dict | None</code> <p>Keyword args for bar plot customization.</p> <code>None</code> <p>Returns:</p> Type Description <code>Figure</code> <p>A matplotlib Figure.</p>"},{"location":"reference/barstats/#examples","title":"Examples","text":"<ul> <li>Minimalist example</li> </ul> <pre><code># mkdocs: render\nfrom fleur import BarStats\nfrom fleur import data\n\ndf = data.load_mtcars(\"pandas\")\n\nBarStats(x=\"cyl\", y=\"vs\", data=df).plot()\n</code></pre>"},{"location":"reference/betweenstats/","title":"Between stats","text":""},{"location":"reference/betweenstats/#fleur.betweenstats.BetweenStats","title":"<code>fleur.betweenstats.BetweenStats</code>","text":"<p>Statistical comparison and plotting class for between-group analysis.</p> <p>This class provides functionality to visualize and statistically compare numerical data across two or more categorical groups. It supports t-tests for two groups and one-way ANOVA for three or more groups. Visualization options include violin plots, box plots, and swarm plots.</p> <p>Attributes:</p> Name Type Description <code>statistic</code> <code>float</code> <p>The computed test statistic (t or F).</p> <code>pvalue</code> <code>float</code> <p>The p-value of the statistical test.</p> <code>main_stat</code> <code>str</code> <p>The formatted test statistic string for display.</p> <code>expression</code> <code>str</code> <p>Full LaTeX-style annotation string.</p> <code>is_ANOVA</code> <code>bool</code> <p>True if test is ANOVA, False if t-test.</p> <code>is_paired</code> <code>bool</code> <p>Whether a paired test was used.</p> <code>dof</code> <code>int</code> <p>Degrees of freedom for t-tests.</p> <code>dof_between</code> <code>int</code> <p>Between-group degrees of freedom for ANOVA.</p> <code>dof_within</code> <code>int</code> <p>Within-group degrees of freedom for ANOVA.</p> <code>n_cat</code> <code>int</code> <p>Number of unique categories in the group column.</p> <code>n_obs</code> <code>int</code> <p>Total number of observations.</p> <code>means</code> <code>list</code> <p>A list with means.</p> <code>test_output</code> <code>list</code> <p>The output of the statistical test.</p> <code>ax</code> <code>Axes</code> <p>The matplotlib axes used for plotting.</p>"},{"location":"reference/betweenstats/#fleur.betweenstats.BetweenStats.__init__","title":"<code>__init__(x, y, data=None, paired=False, approach='parametric', **kwargs)</code>","text":"<p>Initialize a <code>BetweenStats()</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>str | SeriesT | Iterable</code> <p>Colname of <code>data</code> or a Series or array-like.</p> required <code>y</code> <code>str | SeriesT | Iterable</code> <p>Colname of <code>data</code> or a Series or array-like.</p> required <code>data</code> <code>Frame | None</code> <p>An optional dataframe used if <code>x</code> and <code>y</code> are colnames.</p> <code>None</code> <code>paired</code> <code>bool</code> <p>Whether comparing the same observations or not.</p> <code>False</code> <code>approach</code> <code>str</code> <p>A character specifying the type of statistical approach: \"parametric\" (default), \"nonparametric\", \"robust\", \"bayes\".</p> <code>'parametric'</code> <code>kwargs</code> <code>Any</code> <p>Additional arguments passed to the scipy test function. Either <code>scipy.stats.ttest_rel()</code>, <code>scipy.stats.ttest_ind()</code>, <code>scipy.stats.f_oneway()</code>, <code>scipy.stats.wilcoxon()</code></p> <code>{}</code>"},{"location":"reference/betweenstats/#fleur.betweenstats.BetweenStats.plot","title":"<code>plot(*, orientation='vertical', colors=None, show_stats=True, show_means=True, jitter_amount=0.25, violin=True, box=True, scatter=True, violin_kws=None, box_kws=None, scatter_kws=None, mean_kws=dict(fontsize=7, color='black', bbox=dict(boxstyle='round', facecolor='#fefae0', alpha=0.7), zorder=50), mean_line_kws=dict(ls='--', lw=0.6, color='black'), ax=None)</code>","text":"<p>Plot and fit the <code>BetweenStats</code> class to data and render a statistical comparison plot. It detects how many groups you have and apply the required test for this number. All arguments must be passed as keyword arguments.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>str</code> <p>'vertical' or 'horizontal' orientation of plots.</p> <code>'vertical'</code> <code>colors</code> <code>list | None</code> <p>List of colors for each group.</p> <code>None</code> <code>show_stats</code> <code>bool</code> <p>If True, adds statistics on the plot.</p> <code>True</code> <code>show_means</code> <code>bool</code> <p>If True, adds mean labels on the plot.</p> <code>True</code> <code>jitter_amount</code> <code>float</code> <p>Controls the horizontal spread of dots to prevent overlap; 0 aligns them, higher values increase spacing.</p> <code>0.25</code> <code>violin</code> <code>bool</code> <p>Whether to include violin plot.</p> <code>True</code> <code>box</code> <code>bool</code> <p>Whether to include box plot.</p> <code>True</code> <code>scatter</code> <code>bool</code> <p>Whether to include scatter plot of raw data.</p> <code>True</code> <code>violin_kws</code> <code>dict | None</code> <p>Keyword args for violinplot customization.</p> <code>None</code> <code>box_kws</code> <code>dict | None</code> <p>Keyword args for boxplot customization.</p> <code>None</code> <code>scatter_kws</code> <code>dict | None</code> <p>Keyword args for scatter plot customization.</p> <code>None</code> <code>mean_kws</code> <code>dict | None</code> <p>Keyword args for mean labels customization.</p> <code>dict(fontsize=7, color='black', bbox=dict(boxstyle='round', facecolor='#fefae0', alpha=0.7), zorder=50)</code> <code>mean_line_kws</code> <code>dict | None</code> <p>Keyword arguments for the line connecting the mean point and the mean label.</p> <code>dict(ls='--', lw=0.6, color='black')</code> <code>ax</code> <code>(Axes,)</code> <p>Existing Axes to plot on. If None, uses current Axes.</p> <code>None</code> <p>Returns:</p> Type Description <code>Figure</code> <p>A matplotlib Figure.</p>"},{"location":"reference/betweenstats/#examples","title":"Examples","text":"DefaultColorsOrientationHide statisticsHide chart elements <pre><code># mkdocs: render\nfrom fleur import BetweenStats\nfrom fleur import data\n\ndf = data.load_iris()\n\nBetweenStats(df[\"sepal_length\"], df[\"species\"]).plot()\n</code></pre> <pre><code># mkdocs: render\nfrom fleur import BetweenStats\nfrom fleur import data\n\ndf = data.load_iris()\n\nBetweenStats(df[\"sepal_length\"], df[\"species\"]).plot(\n   colors=[\"#005f73\", \"#ee9b00\", \"#9b2226\"]\n)\n</code></pre> <pre><code># mkdocs: render\nfrom fleur import BetweenStats\nfrom fleur import data\n\ndf = data.load_iris()\n\nBetweenStats(df[\"sepal_length\"], df[\"species\"]).plot(\n   orientation=\"horizontal\"\n)\n</code></pre> <pre><code># mkdocs: render\nfrom fleur import BetweenStats\nfrom fleur import data\n\ndf = data.load_iris()\n\nBetweenStats(df[\"sepal_length\"], df[\"species\"]).plot(\n  show_stats=False\n)\n</code></pre> <pre><code># mkdocs: render\nfrom fleur import BetweenStats\nfrom fleur import data\n\ndf = data.load_iris()\n\nBetweenStats(df[\"sepal_length\"], df[\"species\"]).plot(\n  box=False,\n  scatter=False,\n  violin=True, # default\n)\n</code></pre>"},{"location":"reference/betweenstats/#statistical-details","title":"Statistical details","text":"<p>\u2705 means it's already implemented in <code>fleur</code>.</p> <p>\u274c means it's not implemented in <code>fleur</code> yet.</p>"},{"location":"reference/betweenstats/#comparing-2-groups","title":"Comparing 2 groups","text":""},{"location":"reference/betweenstats/#independent-samples","title":"Independent samples","text":"<p>There are 2 cases here: whether we assume the data distribution is normal or not. Many time, not assuming normality is more realistic, but it also reduces the power of the test (the probability of detecting a given effect if that effect actually exists).</p> Parametric \u2705Non-parametric \u2705Robust \u2705 <p>Here we assume the data distribution is normal.</p> <ul> <li>Equal variance: if the groups have equal variances: independent t-test.</li> <li>Unequal variance: if the groups have unequal variances: Welch's t-test.</li> </ul> <p>Here we don't assume anything about the distribution and we need to use the Mann-Whitney U test.</p> <p>Note that the Mann-Whitney U test compares distributions and not means. But this makes sense since not assuming normality (e.g having skewed distributions, for instance) implies that comparing means is not the best way to compare groups, which is what we want to do at the end.</p> <p>Here we don't assume anything about the distribution and we need to use the \"Yuen's t-test\".</p>"},{"location":"reference/betweenstats/#dependent-paired-samples","title":"Dependent (paired) samples","text":"Parametric \u2705Non-parametric \u2705Robust \u274c <p>Here we assume the data distribution is normal and we need to use a paired t-test.</p> <p>Here we don't assume anything about the distribution and we need to use the Wilcoxon signed-rank test.</p> <p>Here we don't assume anything about the distribution and we need to use the \"Yuen's t-test\" for dependent samples.</p>"},{"location":"reference/betweenstats/#comparing-3-or-more-groups","title":"Comparing 3 or more groups","text":""},{"location":"reference/betweenstats/#independent-samples_1","title":"Independent samples","text":"<p>Again, there are parametric and non-parametric approaches depending on the assumption of normality. When normality is assumed, these tests compare group means; otherwise, they compare distributions more generally.</p> Parametric \u2705Non-parametric \u2705Robust \u274c <ul> <li>Equal variance: if the groups have equal variances and normal distributions, use one-way ANOVA.</li> <li>Unequal variance: if the groups have unequal variances, use Welch\u2019s ANOVA.</li> </ul> <p>Use the Kruskal-Wallis test, which does not assume normality and compares the overall distributions across groups.</p> <p>TODO</p>"},{"location":"reference/betweenstats/#dependent-repeated-measures-samples","title":"Dependent (repeated measures) samples","text":"Parametric \u274cNon-parametric \u274cRobust \u274c <p>Assuming normality, use repeated measures ANOVA to compare means across related groups.</p> <p>If normality is not assumed, use the Friedman test, which compares distributions across related groups without assuming normality.</p> <p>TODO</p>"},{"location":"reference/datasets/","title":"Built-in datasets","text":"<p><code>fleur</code> has a few datasets that you can load easily:</p> <ul> <li>iris</li> <li>mtcars</li> <li>titanic</li> </ul> <p></p> <p></p> <p></p>"},{"location":"reference/datasets/#fleur.data.load_iris","title":"<code>fleur.data.load_iris(output_format='pandas')</code>","text":"<p>Load the iris dataset.</p> <p>Parameters:</p> Name Type Description Default <code>output_format</code> <code>str</code> <p>The output format of the dataframe. Note that, for example, if you set <code>output_format=\"polars\"</code>, you must have polars installed. Must be one of the following: \"pandas\", \"polars\", \"pyarrow\", \"modin\", \"cudf\". Default to \"pandas\".</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Frame</code> <p>The iris dataset.</p>"},{"location":"reference/datasets/#fleur.data.load_mtcars","title":"<code>fleur.data.load_mtcars(output_format='pandas')</code>","text":"<p>Load the mtcars dataset.</p> <p>Parameters:</p> Name Type Description Default <code>output_format</code> <code>str</code> <p>The output format of the dataframe. Note that, for example, if you set <code>output_format=\"polars\"</code>, you must have polars installed. Must be one of the following: \"pandas\", \"polars\", \"pyarrow\", \"modin\", \"cudf\". Default to \"pandas\".</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Frame</code> <p>The mtcars dataset.</p>"},{"location":"reference/datasets/#fleur.data.load_titanic","title":"<code>fleur.data.load_titanic(output_format='pandas')</code>","text":"<p>Load the titanic dataset.</p> <p>Parameters:</p> Name Type Description Default <code>output_format</code> <code>str</code> <p>The output format of the dataframe. Note that, for example, if you set <code>output_format=\"polars\"</code>, you must have polars installed. Must be one of the following: \"pandas\", \"polars\", \"pyarrow\", \"modin\", \"cudf\". Default to \"pandas\".</p> <code>'pandas'</code> <p>Returns:</p> Type Description <code>Frame</code> <p>The titanic dataset.</p>"},{"location":"reference/scatterstats/","title":"Scatter stats","text":""},{"location":"reference/scatterstats/#fleur.scatterstats.ScatterStats","title":"<code>fleur.scatterstats.ScatterStats</code>","text":"<p>Statistical correlation and plotting class for numerical variables.</p> <p>Attributes:</p> Name Type Description <code>n_obs</code> <code>int</code> <p>Total number of observations.</p> <code>correlation</code> <code>float</code> <p>Value of the correlation (Pearson, etc).</p> <code>alpha</code> <code>float</code> <p>Probability of rejecting a true null hypothesis.</p> <code>dof</code> <code>int</code> <p>Degrees of freedom for t-test.</p> <code>pvalue</code> <code>float</code> <p>P-value of the t-test.</p> <code>intercept</code> <code>float</code> <p>The intercept (estimation of beta2) in the model.</p> <code>slope</code> <code>float</code> <p>The slope (estimation of beta1) in the model.</p> <code>stderr_slope</code> <code>float</code> <p>Standard error of the slope.</p> <code>ci_lower</code> <code>float</code> <p>Lower bound of the confidence interval.</p> <code>ci_upper</code> <code>float</code> <p>Upper bound of the confidence interval.</p> <code>ax</code> <code>Axes</code> <p>The main matplotlib axes.</p> <code>fig</code> <code>Figure</code> <p>The matplotlib figure.</p>"},{"location":"reference/scatterstats/#fleur.scatterstats.ScatterStats.__init__","title":"<code>__init__(x, y, data=None, alternative='two-sided', effect_size='pearson', ci=95)</code>","text":"<p>Initialize a <code>ScatterStats()</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>str | SeriesT | Iterable</code> <p>Colname of <code>data</code> or a Series or array-like.</p> required <code>y</code> <code>str | SeriesT | Iterable</code> <p>Colname of <code>data</code> or a Series or array-like.</p> required <code>data</code> <code>Frame | None</code> <p>An optional dataframe.</p> <code>None</code> <code>alternative</code> <code>str</code> <p>Defines the alternative hypothesis. Default is 'two-sided'. Must be one of 'two-sided', 'less' and 'greater'.</p> <code>'two-sided'</code> <code>effect_size</code> <code>str</code> <p>The correlation measure to use. Default is 'pearson'. Must be one of 'pearson', 'kendall', 'spearman'.</p> <code>'pearson'</code> <code>ci</code> <code>int | float</code> <p>Confidence level for the label and the regression plot. The default value is 95 (for a 95% confidence level).</p> <code>95</code>"},{"location":"reference/scatterstats/#fleur.scatterstats.ScatterStats.plot","title":"<code>plot(*, bins=None, hist=True, scatter=True, line=True, area=True, scatter_kws=None, line_kws=None, area_kws=None, hist_kws=None, subplot_mosaic_kwargs=None, show_stats=True)</code>","text":"<p>Plot a scatter plot of two variables, with a linear regression line and annotate it with main statistical results.</p> <p>Parameters:</p> Name Type Description Default <code>bins</code> <code>int | list[int] | None</code> <p>Number of bins for the marginal distributions. This can be an integer or a list of two integers (the first for the top distribution and the second for the other).</p> <code>None</code> <code>hist</code> <code>bool</code> <p>Whether to include histograms of marginal distributions.</p> <code>True</code> <code>scatter</code> <code>bool</code> <p>Whether to include the scatter plot.</p> <code>True</code> <code>line</code> <code>bool</code> <p>Whether to include the line of the regression.</p> <code>True</code> <code>area</code> <code>bool</code> <p>Whether to include the area of the confidence interval.</p> <code>True</code> <code>line_kws</code> <code>dict | None</code> <p>Additional parameters which will be passed to the <code>plot()</code> function in matplotlib.</p> <code>None</code> <code>scatter_kws</code> <code>dict | None</code> <p>Additional parameters which will be passed to the <code>scatter()</code> function in matplotlib.</p> <code>None</code> <code>area_kws</code> <code>dict | None</code> <p>Additional parameters which will be passed to the <code>fill_between()</code> function in matplotlib.</p> <code>None</code> <code>hist_kws</code> <code>dict | None</code> <p>Additional parameters which will be passed to the <code>hist()</code> function in matplotlib.</p> <code>None</code> <code>subplot_mosaic_kwargs</code> <code>dict | None</code> <p>Additional keyword arguments to pass to <code>plt.subplot_mosaic()</code>. Default is <code>None</code>.</p> <code>None</code> <code>show_stats</code> <code>bool</code> <p>If True, display statistics on the plot.</p> <code>True</code>"},{"location":"reference/scatterstats/#examples","title":"Examples","text":"<ul> <li>Minimalist example</li> </ul> <pre><code># mkdocs: render\nfrom fleur import ScatterStats\nfrom fleur import data\n\ndf = data.load_iris()\n\nScatterStats(x=df[\"sepal_length\"], y=df[\"sepal_width\"]).plot()\n</code></pre>"}]}